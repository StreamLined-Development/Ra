AST:
Program {
  [0] Declaration {
    kind: fun_decl
    name: "print_it"
    is_mut: false
    type: NamedType("void")
    initializer: BlockExpression {
      statements: [
        [0] ExpressionStatement: MethodCall {
            object: Identifier("x")
            method: "print"
            args: [
            ]
        }
      ]
  }
    generics: [
      [0] name = "T"
      [1] trait_bound
          [0] Printable
    ]
    parameters: [
      [0] x: NamedType("T")
    ]
}
  [1] Declaration {
    kind: fun_decl
    name: "add_and_print"
    is_mut: false
    type: NamedType("T")
    initializer: BlockExpression {
      statements: [
        [0] ExpressionStatement: MethodCall {
            object: Identifier("x")
            method: "print"
            args: [
            ]
        }
        [1] ExpressionStatement: MethodCall {
            object: Identifier("y")
            method: "print"
            args: [
            ]
        }
      ]
      return: BinaryOp {
        left: Identifier("x")
        operator: "+"
        right: Identifier("y")
    }
  }
    generics: [
      [0] name = "T"
      [1] trait_bound
          [0] Printable
          [1] Addable
    ]
    parameters: [
      [0] x: NamedType("T")
      [1] y: NamedType("T")
    ]
}
  [2] Declaration {
    kind: fun_decl
    name: "transform"
    is_mut: false
    type: NamedType("U")
    initializer: BlockExpression {
      statements: [
        [0] Declaration {
          kind: let_decl
          name: "result"
          initializer: MethodCall {
              object: Identifier("handler")
              method: "handle"
              args: [
                [0] Identifier("data")
              ]
          }
        }
      ]
      return: Identifier("result")
  }
    generics: [
      [0] name = "T"
      [1] trait_bound
          [0] Serializable
      [2] name = "U"
      [3] trait_bound
          [0] Handler
    ]
    parameters: [
      [0] data: NamedType("T")
      [1] handler: NamedType("U")
    ]
}
}
